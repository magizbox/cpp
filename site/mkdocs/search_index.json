{
    "docs": [
        {
            "location": "/", 
            "text": "C/C++\n\n\nC++ is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation.\n\n\nIt was designed with a bias toward system programming and embedded, resource-constrained and large systems, with performance, efficiency and flexibility of use as its design highlights. C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications, including desktop applications, servers (e.g. e-commerce, web search or SQL servers), and performance-critical applications (e.g. telephone switches or space probes). C++ is a compiled language, with implementations of it available on many platforms and provided by various organizations, including the Free Software Foundation (FSF's GCC), LLVM, Microsoft, Intel and IBM.\n\n\nC++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in December 2014 as ISO/IEC 14882:2014 (informally known as C++14).The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, ISO/IEC 14882:2003, standard. The current C++14 standard supersedes these and C++11, with new features and an enlarged standard library. Before the initial standardization in 1998, C++ was developed by \nBjarne Stroustrup\n at Bell Labs since 1979, as an extension of the C language as he wanted an efficient and flexible language similar to C, which also provided high-level features for program organization.\n\n\nBooks\n\n\n\n\n\n\n\n\nCourses", 
            "title": "Home"
        }, 
        {
            "location": "/#cc", 
            "text": "C++ is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation.  It was designed with a bias toward system programming and embedded, resource-constrained and large systems, with performance, efficiency and flexibility of use as its design highlights. C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications, including desktop applications, servers (e.g. e-commerce, web search or SQL servers), and performance-critical applications (e.g. telephone switches or space probes). C++ is a compiled language, with implementations of it available on many platforms and provided by various organizations, including the Free Software Foundation (FSF's GCC), LLVM, Microsoft, Intel and IBM.  C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in December 2014 as ISO/IEC 14882:2014 (informally known as C++14).The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, ISO/IEC 14882:2003, standard. The current C++14 standard supersedes these and C++11, with new features and an enlarged standard library. Before the initial standardization in 1998, C++ was developed by  Bjarne Stroustrup  at Bell Labs since 1979, as an extension of the C language as he wanted an efficient and flexible language similar to C, which also provided high-level features for program organization.", 
            "title": "C/C++"
        }, 
        {
            "location": "/#books", 
            "text": "", 
            "title": "Books"
        }, 
        {
            "location": "/#courses", 
            "text": "", 
            "title": "Courses"
        }, 
        {
            "location": "/introduction/", 
            "text": "C/C++\n\n\nVisual Studio 2013\n\n\nInstall Extension\n\n\nVsVim\n\n\ngoogletest\n \nguide\n\n\nFolder Structure\n\n\nwith VS 2013\n\n\nsolution\n\u2502   README.md\n\u2502\n|\u2500\u2500\u2500project1\n|   \u2502   file011.txt\n|   \u2502   file012.txt\n|   \u2502\n|\u2500\u2500\u2500project2\n|   \u2502   file011.txt\n|   \u2502   file012.txt\n|   \u2502\n\n\n\n\nFormat: \nCtrl + K, Ctrl + D\n\n\nC++ Style\n\n\n[wonderplugin_slider id=\"5\"]\n\n\n\n\n\nTools\n\n\n\n\n\n\n\n\n\n\n\nDocumentation\n\n\n\n\n\n\nIDE\n\n\n\n\n\n\n\n\n\n\n\n\nProgramming Tutorials\n\n\n\n\n\n\nClion\n, \nVisual Studio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBuild Tool\n\n\n\nTest\n\n\n\nLogging\n\n\n\n\n\n\n\n\n\n\nGoogle Test\n,\n\nChamois\n,\n\nVS UnitTest\n\n\n\n\n\n\n\n\n\n\n\n\n\nC++: 101\n\n\n1. Installation\n\n\n\n\nInstall Visual Studio 2013\n\n\n\n\n2. Hello World\n\n\n#include \niostream\n\nusing namespace std;\n\nint main() {\n    cout \n \nhello world\n;\n}\n\n\n\n\nC++: Use C++\n\n\n1. Naming \n1\n\n\nvariable_name_like_this\nclass_data_memeber_name_like_this_\nkConstantNamesLikeThis\nClassNameLikeThis\nfilenamelikethis_myusefulclass_test.cc\n\n\n\n\n2. Comment \n1\n\n\n2.1 Class Comment\n\n\n// Iterates over the contents of a GargantuanTable.\n// Example:\n//    GargantuanTableIterator* iter = table-\nNewIterator();\n//    for (iter-\nSeek(\nfoo\n); !iter-\ndone(); iter-\nNext()) {\n//      process(iter-\nkey(), iter-\nvalue());\n//    }\n//    delete iter;\nclass GargantuanTableIterator {\n  ...\n};\n\n\n\n\n2.2 Todo Comment\n\n\n// TODO(kl@gmail.com): Use a \n*\n here for concatenation operator.\n// TODO(Zeke) change this to use relations.\n\n\n\n\nC++: Data Structure\n\n\nStack\n\n\nQuote\n\n\nLinked List\n\n\nGraph\n\n\nArray\n\n\nDeque\n\n\nForward_list\n\n\nList\n\n\nhttp://www.slideshare.net/sshinchan/single-linked-list\n\n\nMap\n\n\nSet\n\n\nStack\n\n\nunordered_map\n\n\nunordered_set\n\n\nvector\n\n\ndatetime\n\n\nhttp://www.tutorialspoint.com/cplusplus/cpp_date_time.htm\n\n\nC++: String\n\n\nString Basic\n1\n\n\n#include \niostream\n\n#include \nstring\n\nusing namespace std ;\n\n// assign a string\nstring s1 = \nwww.java2s.com\\n\n;\ncout \n s1;\n\n// input a string\nstring s2;\ncin \n s2;\n\n// concatenate two strings\nstring s_c = s1 + s2;\n\n// compare strings\ns1 == s2;\n\n\n\n\nC++: Pointer\n\n\nPointer \n1\n\n\nA pointer is a variable whose value is the address of another variable. Like any variable or constant, you must declare a pointer before you can work with it.\n\n\nThe general form of a pointer variable declaration is:\n\n\ntype *variable_name;\n// example\nint    *ip;    // pointer to an integer\ndouble *dp;    // pointer to a double\nfloat  *fp;    // pointer to a float\nchar   *ch;    // pointer to character\n\n\n\n\nPointer Lab\n\n\n\n\n#include \niostream\n\nusing namespace std;\n\n/*\n * Look at these lines\n */\nint* a;\na = new int[3];\na[0] = 10;\na[1] = 2;\ncout \n \nAddress of pointer a: \na = \n \n \na \n endl;\ncout \n \nValue   of pointer a:  a = \n \n a \n endl \n endl;\ncout \n \nAddress of a[0]: \na[0] = \n \n \na[0] \n endl;\ncout \n \nValue   of a[0]: a[0]  = \n \n a[0]  \n endl;\ncout \n \nValue   of a[0]: *a    = \n \n *a    \n endl \n endl;\ncout \n \nAddress of a[1]: \na[1] = \n \n \na[1] \n endl;\ncout \n \nValue   of a[1]: a[1]  = \n \n a[1]  \n endl;\ncout \n \nValue   of a[1]: *(a+1)= \n \n *(a+1)\n endl \n endl;\ncout \n \nAddress of a[2]: \na[2] = \n \n \na[2] \n endl;\ncout \n \nValue   of a[2]: a[2]  = \n \n a[2]  \n endl;\ncout \n \nValue   of a[2]: *(a+2)= \n \n *(a+2)\n endl \n endl;\n\n\n\n\nResult:\n\n\n[code lang=\"text\"]\nAddress of pointer a: \na = 008FF770\nValue   of pointer a:  a = 00C66ED0\n\n\nAddress of a[0]: \na[0] = 00C66ED0\nValue   of a[0]: a[0]  = 10\nValue   of a[0]: *a    = 10\n\n\nAddress of a[1]: \na[1] = 00C66ED4\nValue   of a[1]: a[1]  = 2\nValue   of a[1]: *(a+1)= 2\n\n\nAddress of a[2]: \na[2] = 00C66ED8\nValue   of a[2]: a[2]  = -842150451\nValue   of a[2]: *(a+2)= -842150451\n\n\n\n```cpp\n/*\n * ? How about this\n */\na[3] = 8;\n// it will throw some think like this\n// Stack around the variable 'a' was corrupted.\n\n\n\n\nC++: OOP\n\n\n\n\nClasses and Objects\n\n\n\n\n\n\nC++: Template\n\n\nFunction Template\n\n\n#include \niostream\n\n#include \nstring\n\n\nusing namespace std;\n\ntemplate \ntypename T\n\n\nT Max(T a, T b)\n{\n    return a \n b ? b : a;\n}\n\nint main()\n{\n\n    int i = 39;\n    int j = 20;\n    cout \n Max(i, j) \n endl;\n\n    double f1 = 13.5;\n    double f2 = 20.7;\n    cout \n Max(f1, f2) \n endl;\n\n    string s1 = \nHello\n;\n    string s2 = \nWorld\n;\n    cout \n Max(s1, s2) \n endl;\n\n    double n1 = 20.3;\n    float n2 = 20.4;\n    // it will show an error\n    // Error: no instance of function template \nMax\n matches the argument list\n    //        arguments types are: (double, float)\n    cout \n Max(n1, n2) \n endl;\n    return 0;\n}\n\n\n\n\nC++: Test\n\n\n1. Create Unit Test in Visual Studio 2013\n\n\nStep 1. Create \nTDDLab\n Solution\n\n\n1.1\n Open Visual Studio 2013\n\n\n1.2\n \nFile\n -\n  \nNew Project...\n -\n\n\n\n\n\n\nClick \nVisual C++\n -\n \nWin32\n\n\n\n\n\n\nChoose \nWin32 Console Application\n\n\n\n\n\n\nFill to \nName\n input text: \nTDDLab\n\n\n\n\n\n\nClick \nOK\n -\n \nNext\n\n\n\n\n\n\n1.3\n In project settings, remove options:\n\n\n\n\nPrecompiled Header\n\n\nSecurirty Develoment Lifecyde(SQL) check\n\n\n\n\n1.4\n Click \nFinish\n\n\nStep 2. Create \nCounter\n Class\n\n\n2.1\n Right-click \nTDDLab\n -\n \nAdd\n -\n \nClass...\n\n\n2.2\n Choose \nVisual C++\n -\n \nC++ Class\n -\n \nAdd\n\n\n2.3\n Fill in \nClass name\n box \nCounter\n -\n \nFinish\n\n\n2.4\n In \nCounter.h\n file, add this below function\n\n\nint add(int a, int b);\n\n\n\n\n2.5\n In \nCounter.cpp\n, add this below function\n\n\nint Counter::add(int a, int b) {\n  return a+b;\n}\n\n\n\n\nYour \nCounter\n class should look like this\n\n\n\n\nStep 3. Create \nTDDLabTest\n Project\n\n\n3.1\n Right-click \nSolution 'TDDLab'\n -\n \nAdd\n -\n \nNew Project...\n\n\n3.2\n Choose \nVisual C++\n -\n \nTest\n\n\n3.3\n Choose \nNative Unit Test Project\n\n\n3.4\n Fill to \nName\n input text: \nTDDLabTest\n\n\nStep 4. Write unit test\n\n\n4.1\n  In \nunittest1.cpp\n, add header of \nCounter\n class\n\n\n#include \n../TDDLab/Counter.h\n\n\n\n\n\n4.2\n In \nTEST_METHOD\n function\n\n\n{\n  Counter counter;\n  Assert::AreEqual(2, counter.add(1, 1));\n}\n\n\n\n\n4.3\n Click \nTEST\n in menu bar -\n \nRun\n -\n `All Test (Ctrl + R, A)\n\n\nStep 5. Fix error \nLNK 2019: unresolved external symbol\n\n\n5.1\n Change \nConfiguration Type\n of \nTDDLab\n project\n\n\n\n\nRight click  \nTDDLab\n project -\n \nProperties\n\n\nGeneral\n -\n \nConfiguration Type\n -\n \nStatic library (.lib)\n -\n \nOK\n\n\n\n\n5.2\n Add Reference to \nTDDLabTest\n project\n\n\n\n\nRight click \nTDDLabTest\n solution -\n \nProperties\n -\n \nCommon Properties\n -\n \nAdd New Reference\n\n\nChoose \nTDDLab\n -\n \nOK\n -\n \nOK\n\n\n\n\nStep 6. Run Tests\n\n\nClick \nTEST\n in menu bar -\n \nRun\n -\n `All Test (Ctrl + R, A)\n\n\nTest should be passed.\n\n\n\n\n2. Assertion Frameworks\n\n\n\n\nMicrosoft.VisualStudio.TestTools.CppUnitTestFramework\n\n\nevolutional/Chamois\n\n\n\n\n3. Test Frameworks\n\n\n\n\ngoogletest\n\n\n\n\nC++: IDE\n\n\n\n\nVisual Studio\n\n\nContent\n\n\n\u251c\u2500\u2500 1. Create new project\n\u251c\u2500\u2500 2. Search \n Replace\n\u251c\u2500\u2500 3. Navigation\n\u251c\u2500\u2500 4. Formatting\n\u251c\u2500\u2500 5. Debugging\n\u251c\u2500\u2500 6. Build \n Release\n\u2514\u2500\u2500 7. Git Integration\n\n\n\n\n4. Formatting\n\n\nCtrl + K / Ctrl + F\nCtrl + F / Ctrl + D\n\n\n\n\n6. Git in Visual Studio\n\n\nhttps://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Visual-Studio\n\n\nOnline IDE\n\n\n\n\ncodechef ide\n\n\n\n\nC++: Database\n\n\nSqlite with Visual Studio 2013\n\n\nStep 1\n: Create new project\n1.1 Create a new C++ Win32 Console application.\n\n\nStep 2:\n Download Sqlite DLL\n\n\n2.1. Download the native SQLite DLL from: http://sqlite.org/sqlite-dll-win32-x86-3070400.zip\n2.2. Unzip the DLL and DEF files and place the contents in your project\u2019s source folder (an easy way to find this is to right click on the tab and click the \u201cOpen Containing Folder\u201d menu item.\n\n\nStep 3:\n Build LIB file\n\n\n3.1. Open a \u201cDeveloper Command Prompt\u201d and navigate to your source folder. (If you can't find this tool, follow this post in stackoverflow \nWhere is Developer Command Prompt for VS2013?\n to create it)\n3.2. Create an import library using the following command line: LIB /DEF:sqlite3.def\n\n\nStep 4:\n Add Dependencies\n\n\n4.1. Add the library (i.e. sqlite3.lib) to your Project Properties -\n Configuration Properties -\n Linker -\n Input -\n Additional Dependencies.\n4.2. Download http://sqlite.org/sqlite-amalgamation-3070400.zip\n4.3. Unzip the sqlite3.h header file and place into your source directory.\n4.4. Include the the sqlite3.h header file in your source code.\n4.5. You will need to include the sqlite3.dll in the same directory as your program (or in a System Folder).\n\n\nStep 5:\n Run test code\n\n\n#include \nstdafx.h\n\n#include \nios\n\n#include \niostream\n\n#include \nsqlite3.h\n\n\nusing namespace std;\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n   int rc;\n   char *error;\n\n   // Open Database\n   cout \n \nOpening MyDb.db ...\n \n endl;\n   sqlite3 *db;\n   rc = sqlite3_open(\nMyDb.db\n, \ndb);\n   if (rc)\n   {\n      cerr \n \nError opening SQLite3 database: \n \n sqlite3_errmsg(db) \n endl \n endl;\n      sqlite3_close(db);\n      return 1;\n   }\n   else\n   {\n      cout \n \nOpened MyDb.db.\n \n endl \n endl;\n   }\n\n   // Execute SQL\n   cout \n \nCreating MyTable ...\n \n endl;\n   const char *sqlCreateTable = \nCREATE TABLE MyTable (id INTEGER PRIMARY KEY, value STRING);\n;\n   rc = sqlite3_exec(db, sqlCreateTable, NULL, NULL, \nerror);\n   if (rc)\n   {\n      cerr \n \nError executing SQLite3 statement: \n \n sqlite3_errmsg(db) \n endl \n endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      cout \n \nCreated MyTable.\n \n endl \n endl;\n   }\n\n   // Execute SQL\n   cout \n \nInserting a value into MyTable ...\n \n endl;\n   const char *sqlInsert = \nINSERT INTO MyTable VALUES(NULL, 'A Value');\n;\n   rc = sqlite3_exec(db, sqlInsert, NULL, NULL, \nerror);\n   if (rc)\n   {\n      cerr \n \nError executing SQLite3 statement: \n \n sqlite3_errmsg(db) \n endl \n endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      cout \n \nInserted a value into MyTable.\n \n endl \n endl;\n   }\n\n   // Display MyTable\n   cout \n \nRetrieving values in MyTable ...\n \n endl;\n   const char *sqlSelect = \nSELECT * FROM MyTable;\n;\n   char **results = NULL;\n   int rows, columns;\n   sqlite3_get_table(db, sqlSelect, \nresults, \nrows, \ncolumns, \nerror);\n   if (rc)\n   {\n      cerr \n \nError executing SQLite3 query: \n \n sqlite3_errmsg(db) \n endl \n endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      // Display Table\n      for (int rowCtr = 0; rowCtr \n= rows; ++rowCtr)\n      {\n         for (int colCtr = 0; colCtr \n columns; ++colCtr)\n         {\n            // Determine Cell Position\n            int cellPosition = (rowCtr * columns) + colCtr;\n\n            // Display Cell Value\n            cout.width(12);\n            cout.setf(ios::left);\n            cout \n results[cellPosition] \n \n \n;\n         }\n\n         // End Line\n         cout \n endl;\n\n         // Display Separator For Header\n         if (0 == rowCtr)\n         {\n            for (int colCtr = 0; colCtr \n columns; ++colCtr)\n            {\n               cout.width(12);\n               cout.setf(ios::left);\n               cout \n \n~~~~~~~~~~~~ \n;\n            }\n            cout \n endl;\n         }\n      }\n   }\n   sqlite3_free_table(results);\n\n   // Close Database\n   cout \n \nClosing MyDb.db ...\n \n endl;\n   sqlite3_close(db);\n   cout \n \nClosed MyDb.db\n \n endl \n endl;\n\n   // Wait For User To Close Program\n   cout \n \nPlease press any key to exit the program ...\n \n endl;\n   cin.get();\n\n   return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\nC++ Pointers: tutorialspoint", 
            "title": "Introduction"
        }, 
        {
            "location": "/introduction/#cc", 
            "text": "Visual Studio 2013  Install Extension  VsVim  googletest   guide", 
            "title": "C/C++"
        }, 
        {
            "location": "/introduction/#folder-structure", 
            "text": "with VS 2013  solution\n\u2502   README.md\n\u2502\n|\u2500\u2500\u2500project1\n|   \u2502   file011.txt\n|   \u2502   file012.txt\n|   \u2502\n|\u2500\u2500\u2500project2\n|   \u2502   file011.txt\n|   \u2502   file012.txt\n|   \u2502  Format:  Ctrl + K, Ctrl + D", 
            "title": "Folder Structure"
        }, 
        {
            "location": "/introduction/#c-style", 
            "text": "[wonderplugin_slider id=\"5\"]", 
            "title": "C++ Style"
        }, 
        {
            "location": "/introduction/#tools", 
            "text": "Documentation   \nIDE       Programming Tutorials    Clion ,  Visual Studio           \nBuild Tool  \nTest  \nLogging      Google Test , Chamois , VS UnitTest", 
            "title": "Tools"
        }, 
        {
            "location": "/introduction/#c-101", 
            "text": "", 
            "title": "C++: 101"
        }, 
        {
            "location": "/introduction/#1-installation", 
            "text": "Install Visual Studio 2013", 
            "title": "1. Installation"
        }, 
        {
            "location": "/introduction/#2-hello-world", 
            "text": "#include  iostream \nusing namespace std;\n\nint main() {\n    cout    hello world ;\n}", 
            "title": "2. Hello World"
        }, 
        {
            "location": "/introduction/#c-use-c", 
            "text": "", 
            "title": "C++: Use C++"
        }, 
        {
            "location": "/introduction/#1-naming-1", 
            "text": "variable_name_like_this\nclass_data_memeber_name_like_this_\nkConstantNamesLikeThis\nClassNameLikeThis\nfilenamelikethis_myusefulclass_test.cc", 
            "title": "1. Naming 1"
        }, 
        {
            "location": "/introduction/#2-comment-1", 
            "text": "", 
            "title": "2. Comment 1"
        }, 
        {
            "location": "/introduction/#21-class-comment", 
            "text": "// Iterates over the contents of a GargantuanTable.\n// Example:\n//    GargantuanTableIterator* iter = table- NewIterator();\n//    for (iter- Seek( foo ); !iter- done(); iter- Next()) {\n//      process(iter- key(), iter- value());\n//    }\n//    delete iter;\nclass GargantuanTableIterator {\n  ...\n};", 
            "title": "2.1 Class Comment"
        }, 
        {
            "location": "/introduction/#22-todo-comment", 
            "text": "// TODO(kl@gmail.com): Use a  *  here for concatenation operator.\n// TODO(Zeke) change this to use relations.", 
            "title": "2.2 Todo Comment"
        }, 
        {
            "location": "/introduction/#c-data-structure", 
            "text": "", 
            "title": "C++: Data Structure"
        }, 
        {
            "location": "/introduction/#stack", 
            "text": "", 
            "title": "Stack"
        }, 
        {
            "location": "/introduction/#quote", 
            "text": "", 
            "title": "Quote"
        }, 
        {
            "location": "/introduction/#linked-list", 
            "text": "", 
            "title": "Linked List"
        }, 
        {
            "location": "/introduction/#graph", 
            "text": "", 
            "title": "Graph"
        }, 
        {
            "location": "/introduction/#array", 
            "text": "", 
            "title": "Array"
        }, 
        {
            "location": "/introduction/#deque", 
            "text": "", 
            "title": "Deque"
        }, 
        {
            "location": "/introduction/#forward_list", 
            "text": "", 
            "title": "Forward_list"
        }, 
        {
            "location": "/introduction/#list", 
            "text": "http://www.slideshare.net/sshinchan/single-linked-list", 
            "title": "List"
        }, 
        {
            "location": "/introduction/#map", 
            "text": "", 
            "title": "Map"
        }, 
        {
            "location": "/introduction/#set", 
            "text": "", 
            "title": "Set"
        }, 
        {
            "location": "/introduction/#stack_1", 
            "text": "", 
            "title": "Stack"
        }, 
        {
            "location": "/introduction/#unordered_map", 
            "text": "", 
            "title": "unordered_map"
        }, 
        {
            "location": "/introduction/#unordered_set", 
            "text": "", 
            "title": "unordered_set"
        }, 
        {
            "location": "/introduction/#vector", 
            "text": "", 
            "title": "vector"
        }, 
        {
            "location": "/introduction/#datetime", 
            "text": "http://www.tutorialspoint.com/cplusplus/cpp_date_time.htm", 
            "title": "datetime"
        }, 
        {
            "location": "/introduction/#c-string", 
            "text": "", 
            "title": "C++: String"
        }, 
        {
            "location": "/introduction/#string-basic1", 
            "text": "#include  iostream \n#include  string \nusing namespace std ;\n\n// assign a string\nstring s1 =  www.java2s.com\\n ;\ncout   s1;\n\n// input a string\nstring s2;\ncin   s2;\n\n// concatenate two strings\nstring s_c = s1 + s2;\n\n// compare strings\ns1 == s2;", 
            "title": "String Basic1"
        }, 
        {
            "location": "/introduction/#c-pointer", 
            "text": "", 
            "title": "C++: Pointer"
        }, 
        {
            "location": "/introduction/#pointer-1", 
            "text": "A pointer is a variable whose value is the address of another variable. Like any variable or constant, you must declare a pointer before you can work with it.  The general form of a pointer variable declaration is:  type *variable_name;\n// example\nint    *ip;    // pointer to an integer\ndouble *dp;    // pointer to a double\nfloat  *fp;    // pointer to a float\nchar   *ch;    // pointer to character", 
            "title": "Pointer 1"
        }, 
        {
            "location": "/introduction/#pointer-lab", 
            "text": "#include  iostream \nusing namespace std;\n\n/*\n * Look at these lines\n */\nint* a;\na = new int[3];\na[0] = 10;\na[1] = 2;\ncout    Address of pointer a:  a =      a   endl;\ncout    Value   of pointer a:  a =     a   endl   endl;\ncout    Address of a[0]:  a[0] =      a[0]   endl;\ncout    Value   of a[0]: a[0]  =     a[0]    endl;\ncout    Value   of a[0]: *a    =     *a      endl   endl;\ncout    Address of a[1]:  a[1] =      a[1]   endl;\ncout    Value   of a[1]: a[1]  =     a[1]    endl;\ncout    Value   of a[1]: *(a+1)=     *(a+1)  endl   endl;\ncout    Address of a[2]:  a[2] =      a[2]   endl;\ncout    Value   of a[2]: a[2]  =     a[2]    endl;\ncout    Value   of a[2]: *(a+2)=     *(a+2)  endl   endl;  Result:  [code lang=\"text\"]\nAddress of pointer a:  a = 008FF770\nValue   of pointer a:  a = 00C66ED0  Address of a[0]:  a[0] = 00C66ED0\nValue   of a[0]: a[0]  = 10\nValue   of a[0]: *a    = 10  Address of a[1]:  a[1] = 00C66ED4\nValue   of a[1]: a[1]  = 2\nValue   of a[1]: *(a+1)= 2  Address of a[2]:  a[2] = 00C66ED8\nValue   of a[2]: a[2]  = -842150451\nValue   of a[2]: *(a+2)= -842150451  \n```cpp\n/*\n * ? How about this\n */\na[3] = 8;\n// it will throw some think like this\n// Stack around the variable 'a' was corrupted.", 
            "title": "Pointer Lab"
        }, 
        {
            "location": "/introduction/#c-oop", 
            "text": "", 
            "title": "C++: OOP"
        }, 
        {
            "location": "/introduction/#c-template", 
            "text": "", 
            "title": "C++: Template"
        }, 
        {
            "location": "/introduction/#function-template", 
            "text": "#include  iostream \n#include  string \n\nusing namespace std;\n\ntemplate  typename T \n\nT Max(T a, T b)\n{\n    return a   b ? b : a;\n}\n\nint main()\n{\n\n    int i = 39;\n    int j = 20;\n    cout   Max(i, j)   endl;\n\n    double f1 = 13.5;\n    double f2 = 20.7;\n    cout   Max(f1, f2)   endl;\n\n    string s1 =  Hello ;\n    string s2 =  World ;\n    cout   Max(s1, s2)   endl;\n\n    double n1 = 20.3;\n    float n2 = 20.4;\n    // it will show an error\n    // Error: no instance of function template  Max  matches the argument list\n    //        arguments types are: (double, float)\n    cout   Max(n1, n2)   endl;\n    return 0;\n}", 
            "title": "Function Template"
        }, 
        {
            "location": "/introduction/#c-test", 
            "text": "", 
            "title": "C++: Test"
        }, 
        {
            "location": "/introduction/#1-create-unit-test-in-visual-studio-2013", 
            "text": "", 
            "title": "1. Create Unit Test in Visual Studio 2013"
        }, 
        {
            "location": "/introduction/#step-1-create-tddlab-solution", 
            "text": "1.1  Open Visual Studio 2013  1.2   File  -    New Project...  -    Click  Visual C++  -   Win32    Choose  Win32 Console Application    Fill to  Name  input text:  TDDLab    Click  OK  -   Next    1.3  In project settings, remove options:   Precompiled Header  Securirty Develoment Lifecyde(SQL) check   1.4  Click  Finish", 
            "title": "Step 1. Create TDDLab Solution"
        }, 
        {
            "location": "/introduction/#step-2-create-counter-class", 
            "text": "2.1  Right-click  TDDLab  -   Add  -   Class...  2.2  Choose  Visual C++  -   C++ Class  -   Add  2.3  Fill in  Class name  box  Counter  -   Finish  2.4  In  Counter.h  file, add this below function  int add(int a, int b);  2.5  In  Counter.cpp , add this below function  int Counter::add(int a, int b) {\n  return a+b;\n}  Your  Counter  class should look like this", 
            "title": "Step 2. Create Counter Class"
        }, 
        {
            "location": "/introduction/#step-3-create-tddlabtest-project", 
            "text": "3.1  Right-click  Solution 'TDDLab'  -   Add  -   New Project...  3.2  Choose  Visual C++  -   Test  3.3  Choose  Native Unit Test Project  3.4  Fill to  Name  input text:  TDDLabTest", 
            "title": "Step 3. Create TDDLabTest Project"
        }, 
        {
            "location": "/introduction/#step-4-write-unit-test", 
            "text": "4.1   In  unittest1.cpp , add header of  Counter  class  #include  ../TDDLab/Counter.h   4.2  In  TEST_METHOD  function  {\n  Counter counter;\n  Assert::AreEqual(2, counter.add(1, 1));\n}  4.3  Click  TEST  in menu bar -   Run  -  `All Test (Ctrl + R, A)", 
            "title": "Step 4. Write unit test"
        }, 
        {
            "location": "/introduction/#step-5-fix-error-lnk-2019-unresolved-external-symbol", 
            "text": "5.1  Change  Configuration Type  of  TDDLab  project   Right click   TDDLab  project -   Properties  General  -   Configuration Type  -   Static library (.lib)  -   OK   5.2  Add Reference to  TDDLabTest  project   Right click  TDDLabTest  solution -   Properties  -   Common Properties  -   Add New Reference  Choose  TDDLab  -   OK  -   OK", 
            "title": "Step 5. Fix error LNK 2019: unresolved external symbol"
        }, 
        {
            "location": "/introduction/#step-6-run-tests", 
            "text": "Click  TEST  in menu bar -   Run  -  `All Test (Ctrl + R, A)  Test should be passed.", 
            "title": "Step 6. Run Tests"
        }, 
        {
            "location": "/introduction/#2-assertion-frameworks", 
            "text": "Microsoft.VisualStudio.TestTools.CppUnitTestFramework  evolutional/Chamois", 
            "title": "2. Assertion Frameworks"
        }, 
        {
            "location": "/introduction/#3-test-frameworks", 
            "text": "googletest", 
            "title": "3. Test Frameworks"
        }, 
        {
            "location": "/introduction/#c-ide", 
            "text": "", 
            "title": "C++: IDE"
        }, 
        {
            "location": "/introduction/#visual-studio", 
            "text": "", 
            "title": "Visual Studio"
        }, 
        {
            "location": "/introduction/#content", 
            "text": "\u251c\u2500\u2500 1. Create new project\n\u251c\u2500\u2500 2. Search   Replace\n\u251c\u2500\u2500 3. Navigation\n\u251c\u2500\u2500 4. Formatting\n\u251c\u2500\u2500 5. Debugging\n\u251c\u2500\u2500 6. Build   Release\n\u2514\u2500\u2500 7. Git Integration", 
            "title": "Content"
        }, 
        {
            "location": "/introduction/#4-formatting", 
            "text": "Ctrl + K / Ctrl + F\nCtrl + F / Ctrl + D", 
            "title": "4. Formatting"
        }, 
        {
            "location": "/introduction/#6-git-in-visual-studio", 
            "text": "https://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Visual-Studio", 
            "title": "6. Git in Visual Studio"
        }, 
        {
            "location": "/introduction/#online-ide", 
            "text": "codechef ide", 
            "title": "Online IDE"
        }, 
        {
            "location": "/introduction/#c-database", 
            "text": "", 
            "title": "C++: Database"
        }, 
        {
            "location": "/introduction/#sqlite-with-visual-studio-2013", 
            "text": "Step 1 : Create new project\n1.1 Create a new C++ Win32 Console application.  Step 2:  Download Sqlite DLL  2.1. Download the native SQLite DLL from: http://sqlite.org/sqlite-dll-win32-x86-3070400.zip\n2.2. Unzip the DLL and DEF files and place the contents in your project\u2019s source folder (an easy way to find this is to right click on the tab and click the \u201cOpen Containing Folder\u201d menu item.  Step 3:  Build LIB file  3.1. Open a \u201cDeveloper Command Prompt\u201d and navigate to your source folder. (If you can't find this tool, follow this post in stackoverflow  Where is Developer Command Prompt for VS2013?  to create it)\n3.2. Create an import library using the following command line: LIB /DEF:sqlite3.def  Step 4:  Add Dependencies  4.1. Add the library (i.e. sqlite3.lib) to your Project Properties -  Configuration Properties -  Linker -  Input -  Additional Dependencies.\n4.2. Download http://sqlite.org/sqlite-amalgamation-3070400.zip\n4.3. Unzip the sqlite3.h header file and place into your source directory.\n4.4. Include the the sqlite3.h header file in your source code.\n4.5. You will need to include the sqlite3.dll in the same directory as your program (or in a System Folder).  Step 5:  Run test code  #include  stdafx.h \n#include  ios \n#include  iostream \n#include  sqlite3.h \n\nusing namespace std;\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n   int rc;\n   char *error;\n\n   // Open Database\n   cout    Opening MyDb.db ...    endl;\n   sqlite3 *db;\n   rc = sqlite3_open( MyDb.db ,  db);\n   if (rc)\n   {\n      cerr    Error opening SQLite3 database:     sqlite3_errmsg(db)   endl   endl;\n      sqlite3_close(db);\n      return 1;\n   }\n   else\n   {\n      cout    Opened MyDb.db.    endl   endl;\n   }\n\n   // Execute SQL\n   cout    Creating MyTable ...    endl;\n   const char *sqlCreateTable =  CREATE TABLE MyTable (id INTEGER PRIMARY KEY, value STRING); ;\n   rc = sqlite3_exec(db, sqlCreateTable, NULL, NULL,  error);\n   if (rc)\n   {\n      cerr    Error executing SQLite3 statement:     sqlite3_errmsg(db)   endl   endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      cout    Created MyTable.    endl   endl;\n   }\n\n   // Execute SQL\n   cout    Inserting a value into MyTable ...    endl;\n   const char *sqlInsert =  INSERT INTO MyTable VALUES(NULL, 'A Value'); ;\n   rc = sqlite3_exec(db, sqlInsert, NULL, NULL,  error);\n   if (rc)\n   {\n      cerr    Error executing SQLite3 statement:     sqlite3_errmsg(db)   endl   endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      cout    Inserted a value into MyTable.    endl   endl;\n   }\n\n   // Display MyTable\n   cout    Retrieving values in MyTable ...    endl;\n   const char *sqlSelect =  SELECT * FROM MyTable; ;\n   char **results = NULL;\n   int rows, columns;\n   sqlite3_get_table(db, sqlSelect,  results,  rows,  columns,  error);\n   if (rc)\n   {\n      cerr    Error executing SQLite3 query:     sqlite3_errmsg(db)   endl   endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      // Display Table\n      for (int rowCtr = 0; rowCtr  = rows; ++rowCtr)\n      {\n         for (int colCtr = 0; colCtr   columns; ++colCtr)\n         {\n            // Determine Cell Position\n            int cellPosition = (rowCtr * columns) + colCtr;\n\n            // Display Cell Value\n            cout.width(12);\n            cout.setf(ios::left);\n            cout   results[cellPosition]      ;\n         }\n\n         // End Line\n         cout   endl;\n\n         // Display Separator For Header\n         if (0 == rowCtr)\n         {\n            for (int colCtr = 0; colCtr   columns; ++colCtr)\n            {\n               cout.width(12);\n               cout.setf(ios::left);\n               cout    ~~~~~~~~~~~~  ;\n            }\n            cout   endl;\n         }\n      }\n   }\n   sqlite3_free_table(results);\n\n   // Close Database\n   cout    Closing MyDb.db ...    endl;\n   sqlite3_close(db);\n   cout    Closed MyDb.db    endl   endl;\n\n   // Wait For User To Close Program\n   cout    Please press any key to exit the program ...    endl;\n   cin.get();\n\n   return 0;\n}      C++ Pointers: tutorialspoint", 
            "title": "Sqlite with Visual Studio 2013"
        }, 
        {
            "location": "/unittest_vs/", 
            "text": "Create Unit Test in Visual Studio 2013\n\n\nStep 1. Create \nTDDLab\n Solution\n\n\n1.1\n Open Visual Studio 2013\n\n\n1.2\n \nFile\n -\n  \nNew Project...\n -\n\n\n\n\n\n\nClick \nVisual C++\n -\n \nWin32\n\n\n\n\n\n\nChoose \nWin32 Console Application\n\n\n\n\n\n\nFill to \nName\n input text: \nTDDLab\n\n\n\n\n\n\nClick \nOK\n -\n \nNext\n\n\n\n\n\n\n1.3\n In project settings, remove options:\n\n\n\n\nPrecompiled Header\n\n\nSecurirty Develoment Lifecyde(SQL) check\n\n\n\n\n1.4\n Click \nFinish\n\n\nStep 2. Create \nCounter\n Class\n\n\n2.1\n Right-click \nTDDLab\n -\n \nAdd\n -\n \nClass...\n\n\n2.2\n Choose \nVisual C++\n -\n \nC++ Class\n -\n \nAdd\n\n\n2.3\n Fill in \nClass name\n box \nCounter\n -\n \nFinish\n\n\n2.4\n In \nCounter.h\n file, add this below function\n\n\nint add(int a, int b);\n\n\n\n\n2.5\n In \nCounter.cpp\n, add this below function\n\n\nint Counter::add(int a, int b) {\n  return a+b;\n}\n\n\n\n\nYour \nCounter\n class should look like this\n\n\n\n\nStep 3. Create \nTDDLabTest\n Project\n\n\n3.1\n Right-click \nSolution 'TDDLab'\n -\n \nAdd\n -\n \nNew Project...\n\n\n3.2\n Choose \nVisual C++\n -\n \nTest\n\n\n3.3\n Choose \nNative Unit Test Project\n\n\n3.4\n Fill to \nName\n input text: \nTDDLabTest\n\n\nStep 4. Write unit test\n\n\n4.1\n  In \nunittest1.cpp\n, add header of \nCounter\n class\n\n\n#include \n../TDDLab/Counter.h\n\n\n\n\n\n4.2\n In \nTEST_METHOD\n function\n\n\n{\n  Counter counter;\n  Assert::AreEqual(2, counter.add(1, 1));\n}\n\n\n\n\n4.3\n Click \nTEST\n in menu bar -\n \nRun\n -\n `All Test (Ctrl + R, A)\n\n\nStep 5. Fix error \nLNK 2019: unresolved external symbol\n\n\n5.1\n Change \nConfiguration Type\n of \nTDDLab\n project\n\n\n\n\nRight click  \nTDDLab\n project -\n \nProperties\n\n\nGeneral\n -\n \nConfiguration Type\n -\n \nStatic library (.lib)\n -\n \nOK\n\n\n\n\n5.2\n Add Reference to \nTDDLabTest\n project\n\n\n\n\nRight click \nTDDLabTest\n solution -\n \nProperties\n -\n \nCommon Properties\n -\n \nAdd New Reference\n\n\nChoose \nTDDLab\n -\n \nOK\n -\n \nOK\n\n\n\n\nStep 6. Run Tests\n\n\nClick \nTEST\n in menu bar -\n \nRun\n -\n `All Test (Ctrl + R, A)\n\n\nTest should be passed.", 
            "title": "Create Unit Test in Visual Studio 2013"
        }, 
        {
            "location": "/unittest_vs/#create-unit-test-in-visual-studio-2013", 
            "text": "", 
            "title": "Create Unit Test in Visual Studio 2013"
        }, 
        {
            "location": "/unittest_vs/#step-1-create-tddlab-solution", 
            "text": "1.1  Open Visual Studio 2013  1.2   File  -    New Project...  -    Click  Visual C++  -   Win32    Choose  Win32 Console Application    Fill to  Name  input text:  TDDLab    Click  OK  -   Next    1.3  In project settings, remove options:   Precompiled Header  Securirty Develoment Lifecyde(SQL) check   1.4  Click  Finish", 
            "title": "Step 1. Create TDDLab Solution"
        }, 
        {
            "location": "/unittest_vs/#step-2-create-counter-class", 
            "text": "2.1  Right-click  TDDLab  -   Add  -   Class...  2.2  Choose  Visual C++  -   C++ Class  -   Add  2.3  Fill in  Class name  box  Counter  -   Finish  2.4  In  Counter.h  file, add this below function  int add(int a, int b);  2.5  In  Counter.cpp , add this below function  int Counter::add(int a, int b) {\n  return a+b;\n}  Your  Counter  class should look like this", 
            "title": "Step 2. Create Counter Class"
        }, 
        {
            "location": "/unittest_vs/#step-3-create-tddlabtest-project", 
            "text": "3.1  Right-click  Solution 'TDDLab'  -   Add  -   New Project...  3.2  Choose  Visual C++  -   Test  3.3  Choose  Native Unit Test Project  3.4  Fill to  Name  input text:  TDDLabTest", 
            "title": "Step 3. Create TDDLabTest Project"
        }, 
        {
            "location": "/unittest_vs/#step-4-write-unit-test", 
            "text": "4.1   In  unittest1.cpp , add header of  Counter  class  #include  ../TDDLab/Counter.h   4.2  In  TEST_METHOD  function  {\n  Counter counter;\n  Assert::AreEqual(2, counter.add(1, 1));\n}  4.3  Click  TEST  in menu bar -   Run  -  `All Test (Ctrl + R, A)", 
            "title": "Step 4. Write unit test"
        }, 
        {
            "location": "/unittest_vs/#step-5-fix-error-lnk-2019-unresolved-external-symbol", 
            "text": "5.1  Change  Configuration Type  of  TDDLab  project   Right click   TDDLab  project -   Properties  General  -   Configuration Type  -   Static library (.lib)  -   OK   5.2  Add Reference to  TDDLabTest  project   Right click  TDDLabTest  solution -   Properties  -   Common Properties  -   Add New Reference  Choose  TDDLab  -   OK  -   OK", 
            "title": "Step 5. Fix error LNK 2019: unresolved external symbol"
        }, 
        {
            "location": "/unittest_vs/#step-6-run-tests", 
            "text": "Click  TEST  in menu bar -   Run  -  `All Test (Ctrl + R, A)  Test should be passed.", 
            "title": "Step 6. Run Tests"
        }
    ]
}