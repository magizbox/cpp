{
    "docs": [
        {
            "location": "/", 
            "text": "C++ Tutorial \nby MG\n\n\n\n\nC++ is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation. It was designed with a bias toward system programming and embedded, resource-constrained and large systems, with performance, efficiency and flexibility of use as its design highlights. C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications, including desktop applications, servers (e.g. e-commerce, web search or SQL servers), and performance-critical applications (e.g. telephone switches or space probes). C++ is a compiled language, with implementations of it available on many platforms and provided by various organizations, including the Free Software Foundation (FSF's GCC), LLVM, Microsoft, Intel and IBM.\n\n\n\n\nTable of contents\n\n\nThis site is intended to host a variety of resources and pointers to information about C++. \n\n\n Get Started\n\n\nBasics\n\n\n\n\nBasic Syntax: conditional, loop, function\n\n\nData Structure: number\n\n\nData Structure: string\n\n\nData Structure: collection\n\n\nData Structure: datetime\n\n\n\n\nClasses and Inheritance\n\n\n\n\nClasses and Objects\n\n\nConstructors\n\n\nInheritance\n\n\nDesign Patterns with Python\n\n\n\n\nGo Deeper\n\n\n\n\nFile System \n IO\n\n\nOperating System Programming\n\n\nDatabase\n\n\nNetworking Programming\n\n\nConcurrency and Parallelism Programming\n\n\nEvent Based Programming\n\n\nWeb Development\n\n\n\n\nSoftware Development\n\n\n\n\nLogging\n\n\nConfiguration\n\n\nCommand Line\n\n\nTesting\n\n\nIDE \n Debugging\n\n\nPackage Manager\n\n\nEnvironment\n\n\nModule\n\n\nProduction\n\n\n\n\nMiscellaneous\n\n\n\n\nBooks\n\n\nCourses\n\n\n\n\nBooks\n\n\n\n\n\n\n\n\nCourses", 
            "title": "Home"
        }, 
        {
            "location": "/#c-tutorial-by-mg", 
            "text": "C++ is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation. It was designed with a bias toward system programming and embedded, resource-constrained and large systems, with performance, efficiency and flexibility of use as its design highlights. C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications, including desktop applications, servers (e.g. e-commerce, web search or SQL servers), and performance-critical applications (e.g. telephone switches or space probes). C++ is a compiled language, with implementations of it available on many platforms and provided by various organizations, including the Free Software Foundation (FSF's GCC), LLVM, Microsoft, Intel and IBM.", 
            "title": "C++ Tutorial by MG"
        }, 
        {
            "location": "/#table-of-contents", 
            "text": "This site is intended to host a variety of resources and pointers to information about C++.    Get Started", 
            "title": "Table of contents"
        }, 
        {
            "location": "/#basics", 
            "text": "Basic Syntax: conditional, loop, function  Data Structure: number  Data Structure: string  Data Structure: collection  Data Structure: datetime", 
            "title": "Basics"
        }, 
        {
            "location": "/#classes-and-inheritance", 
            "text": "Classes and Objects  Constructors  Inheritance  Design Patterns with Python", 
            "title": "Classes and Inheritance"
        }, 
        {
            "location": "/#go-deeper", 
            "text": "File System   IO  Operating System Programming  Database  Networking Programming  Concurrency and Parallelism Programming  Event Based Programming  Web Development", 
            "title": "Go Deeper"
        }, 
        {
            "location": "/#software-development", 
            "text": "Logging  Configuration  Command Line  Testing  IDE   Debugging  Package Manager  Environment  Module  Production", 
            "title": "Software Development"
        }, 
        {
            "location": "/#miscellaneous", 
            "text": "Books  Courses", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/#books", 
            "text": "", 
            "title": "Books"
        }, 
        {
            "location": "/#courses", 
            "text": "", 
            "title": "Courses"
        }, 
        {
            "location": "/get_started/", 
            "text": "Get Started\n\n\nWhat do I need to start with CLion?\n\n\nIn general to develop in C/C++ with CLion you need:\n\n\n\n\nCMake, 2.8.11+ (Check JetBrains guide for updates)\n\n\nGCC/G++/Clang (Linux) or\n\n\nMinGW 3.\n or MinGW\u200a\u2014\u200aw64 3.-4. or Cygwin 1.7.32 (minimum required) up to 2.0.\n (Windows)\n\n\n\n\nDownloading and Installing CMake\n\n\nDownloading and installing CMake is pretty simple, just go to the \nwebsite\n, download and install by following the recommended guide there or the on Desktop Wizard.\n\n\n\n\nDownload and install file \ncmake-3.9.0-win64-x65.msi\n \n\n\n\n\n cmake\nUsage\n\n  cmake [options] \npath-to-source\n\n  cmake [options] \npath-to-existing-build\n\n\nSpecify a source directory to (re-)generate a build system for it in the\ncurrent working directory.  Specify an existing build directory to\nre-generate its build system.\n\nRun 'cmake --help' for more information.\n\n\n\n\nDownloading and Getting Cygwin\n\n\nCygwin is a large collection of GNU and Open Source tools which provide functionality similar to a Linux distribution on Windows\n\n\n\n\n\n\nDownload file \nsetup-x86_64.exe\n from the website \nhttps://cygwin.com/install.html\n\n\n\n\n\n\nInstall \nsetup-x86_64.exe\n file\n\n\n\n\n\n\n\n\nThis is the root directory where Cygwin will be located, usually the recommended C:\\ works\n\n\n\n\nChoose where to install LOCAL DOWNLOAD PACKAGES: This is not the same as root directory, but rather where packages (ie. extra C libraries and tools) you download using Cygwin will be located\n\n\n\n\nFollow the recommended instructions until you get to packages screen:\n\n\n\n\nOnce you get to the packages screen, this is where you customize what libraries or tools you will install. From here on I followed the above guide but here\u2019s the gist:\n\n\nFrom this window, choose the Cygwin applications to install. For our purposes, you will select certain GNU C/C++ packages.\n\n\nClick the + sign next to the Devel category to expand it.\n\n\nYou will see a long list of possible packages that can be downloaded. Scroll the list to see more packages.\n\n\nPick each of the following packages by clicking its corresponding \u201cSkip\u201d marker.\n\n\n\n\ngcc-core\n: C compiler subpackage\n\n\ngcc-g++\n: C++ subpackage\n\n\nlibgcc1\n: C runtime library\n\n\ngdb\n: The GNU Debugger\n\n\nmake\n: The GNU version of the \u2018make\u2019 utility\n\n\nlibmpfr4\n : A library for multiple-precision floating-point arithmetic with exact rounding\n\n\n\n\nDownload and install CLion\n\n\nDownload file \nCLion-2017.2.exe\n from website \nhttps://www.jetbrains.com/clion/download/#section=windows\n\n\n\n\nConfig environment File \n Settings... \n Build, Execution, Deployment\n\n\n\n\nChoose \nCygwin home\n: \nC:\\cygwin64\n\n\nChoose \nCMake executable\n: \nBundled CMake 3.8.2\n\n\n\n\nRun your first C++ program with CLion", 
            "title": "Get Started"
        }, 
        {
            "location": "/get_started/#get-started", 
            "text": "", 
            "title": "Get Started"
        }, 
        {
            "location": "/get_started/#what-do-i-need-to-start-with-clion", 
            "text": "In general to develop in C/C++ with CLion you need:   CMake, 2.8.11+ (Check JetBrains guide for updates)  GCC/G++/Clang (Linux) or  MinGW 3.  or MinGW\u200a\u2014\u200aw64 3.-4. or Cygwin 1.7.32 (minimum required) up to 2.0.  (Windows)", 
            "title": "What do I need to start with CLion?"
        }, 
        {
            "location": "/get_started/#downloading-and-installing-cmake", 
            "text": "Downloading and installing CMake is pretty simple, just go to the  website , download and install by following the recommended guide there or the on Desktop Wizard.   Download and install file  cmake-3.9.0-win64-x65.msi      cmake\nUsage\n\n  cmake [options]  path-to-source \n  cmake [options]  path-to-existing-build \n\nSpecify a source directory to (re-)generate a build system for it in the\ncurrent working directory.  Specify an existing build directory to\nre-generate its build system.\n\nRun 'cmake --help' for more information.", 
            "title": "Downloading and Installing CMake"
        }, 
        {
            "location": "/get_started/#downloading-and-getting-cygwin", 
            "text": "Cygwin is a large collection of GNU and Open Source tools which provide functionality similar to a Linux distribution on Windows    Download file  setup-x86_64.exe  from the website  https://cygwin.com/install.html    Install  setup-x86_64.exe  file     This is the root directory where Cygwin will be located, usually the recommended C:\\ works   Choose where to install LOCAL DOWNLOAD PACKAGES: This is not the same as root directory, but rather where packages (ie. extra C libraries and tools) you download using Cygwin will be located   Follow the recommended instructions until you get to packages screen:   Once you get to the packages screen, this is where you customize what libraries or tools you will install. From here on I followed the above guide but here\u2019s the gist:  From this window, choose the Cygwin applications to install. For our purposes, you will select certain GNU C/C++ packages.  Click the + sign next to the Devel category to expand it.  You will see a long list of possible packages that can be downloaded. Scroll the list to see more packages.  Pick each of the following packages by clicking its corresponding \u201cSkip\u201d marker.   gcc-core : C compiler subpackage  gcc-g++ : C++ subpackage  libgcc1 : C runtime library  gdb : The GNU Debugger  make : The GNU version of the \u2018make\u2019 utility  libmpfr4  : A library for multiple-precision floating-point arithmetic with exact rounding", 
            "title": "Downloading and Getting Cygwin"
        }, 
        {
            "location": "/get_started/#download-and-install-clion", 
            "text": "Download file  CLion-2017.2.exe  from website  https://www.jetbrains.com/clion/download/#section=windows   Config environment File   Settings...   Build, Execution, Deployment   Choose  Cygwin home :  C:\\cygwin64  Choose  CMake executable :  Bundled CMake 3.8.2   Run your first C++ program with CLion", 
            "title": "Download and install CLion"
        }, 
        {
            "location": "/basic_syntax/", 
            "text": "C/C++\n\n\nHello World\n\n\n#include \niostream\n\nusing namespace std;\n\nint main() {\n    cout \n \nhello world\n;\n}\n\n\n\n\nConvention\n\n\nNaming\n\n\nvariable_name_like_this\nclass_data_memeber_name_like_this_\nkConstantNamesLikeThis\nClassNameLikeThis\nfilenamelikethis_myusefulclass_test.cc\n\n\n\n\nComment\n\n\nClass Comment\n\n\n// Iterates over the contents of a GargantuanTable.\n// Example:\n//    GargantuanTableIterator* iter = table-\nNewIterator();\n//    for (iter-\nSeek(\nfoo\n); !iter-\ndone(); iter-\nNext()) {\n//      process(iter-\nkey(), iter-\nvalue());\n//    }\n//    delete iter;\nclass GargantuanTableIterator {\n  ...\n};\n\n\n\n\nTodo Comment\n\n\n// TODO(kl@gmail.com): Use a \n*\n here for concatenation operator.\n// TODO(Zeke) change this to use relations.", 
            "title": "Basic Syntax"
        }, 
        {
            "location": "/basic_syntax/#cc", 
            "text": "", 
            "title": "C/C++"
        }, 
        {
            "location": "/basic_syntax/#hello-world", 
            "text": "#include  iostream \nusing namespace std;\n\nint main() {\n    cout    hello world ;\n}", 
            "title": "Hello World"
        }, 
        {
            "location": "/basic_syntax/#convention", 
            "text": "", 
            "title": "Convention"
        }, 
        {
            "location": "/basic_syntax/#naming", 
            "text": "variable_name_like_this\nclass_data_memeber_name_like_this_\nkConstantNamesLikeThis\nClassNameLikeThis\nfilenamelikethis_myusefulclass_test.cc", 
            "title": "Naming"
        }, 
        {
            "location": "/basic_syntax/#comment", 
            "text": "", 
            "title": "Comment"
        }, 
        {
            "location": "/basic_syntax/#class-comment", 
            "text": "// Iterates over the contents of a GargantuanTable.\n// Example:\n//    GargantuanTableIterator* iter = table- NewIterator();\n//    for (iter- Seek( foo ); !iter- done(); iter- Next()) {\n//      process(iter- key(), iter- value());\n//    }\n//    delete iter;\nclass GargantuanTableIterator {\n  ...\n};", 
            "title": "Class Comment"
        }, 
        {
            "location": "/basic_syntax/#todo-comment", 
            "text": "// TODO(kl@gmail.com): Use a  *  here for concatenation operator.\n// TODO(Zeke) change this to use relations.", 
            "title": "Todo Comment"
        }, 
        {
            "location": "/datastructure/", 
            "text": "Data Structure\n\n\nNumber\n\n\nC++ offer the programmer a rich assortment of built-in as well as user defined data types. Following table lists down seven basic C++ data types:\n\n\n\n\nBoolean\n - bool\n\n\nCharacter\n - char\n\n\nInteger\n - int\n\n\nFloating point\n - float\n\n\nDouble floating point\n - double\n\n\nValueless\n - void\n\n\nWide character\n - wchar_t\n\n\n\n\nSeveral of the basic types can be modified using one or more of these type modifiers: \nsigned\n, \nunsigned\n, \nshort\n, \nlong\n\n\nFollowing is the example, which will produce correct size of various data types on your computer.\n\n\n#include \niostream\n\nusing namespace std;\n\nint main() {\n   cout \n \nSize of char : \n \n sizeof(char) \n endl;\n   cout \n \nSize of int : \n \n sizeof(int) \n endl;\n   cout \n \nSize of short int : \n \n sizeof(short int) \n endl;\n   cout \n \nSize of long int : \n \n sizeof(long int) \n endl;\n   cout \n \nSize of float : \n \n sizeof(float) \n endl;\n   cout \n \nSize of double : \n \n sizeof(double) \n endl;\n   cout \n \nSize of wchar_t : \n \n sizeof(wchar_t) \n endl;\n   return 0;\n}\n\n\n\n\nString\n\n\nString Basic\n\n\n#include \niostream\n\n#include \nstring\n\nusing namespace std ;\n\n// assign a string\nstring s1 = \nwww.java2s.com\\n\n;\ncout \n s1;\n\n// input a string\nstring s2;\ncin \n s2;\n\n// concatenate two strings\nstring s_c = s1 + s2;\n\n// compare strings\ns1 == s2;\n\n\n\n\nCollection\n\n\nPointer\n\n\nA pointer is a variable whose value is the address of another variable. Like any variable or constant, you must declare a pointer before you can work with it.\n\n\nThe general form of a pointer variable declaration is:\n\n\ntype *variable_name;\n// example\nint    *ip;    // pointer to an integer\ndouble *dp;    // pointer to a double\nfloat  *fp;    // pointer to a float\nchar   *ch;    // pointer to character\n\n\n\n\nPointer Lab\n\n\n\n\n#include \niostream\n\nusing namespace std;\n\n/*\n * Look at these lines\n */\nint* a;\na = new int[3];\na[0] = 10;\na[1] = 2;\ncout \n \nAddress of pointer a: \na = \n \n \na \n endl;\ncout \n \nValue   of pointer a:  a = \n \n a \n endl \n endl;\ncout \n \nAddress of a[0]: \na[0] = \n \n \na[0] \n endl;\ncout \n \nValue   of a[0]: a[0]  = \n \n a[0]  \n endl;\ncout \n \nValue   of a[0]: *a    = \n \n *a    \n endl \n endl;\ncout \n \nAddress of a[1]: \na[1] = \n \n \na[1] \n endl;\ncout \n \nValue   of a[1]: a[1]  = \n \n a[1]  \n endl;\ncout \n \nValue   of a[1]: *(a+1)= \n \n *(a+1)\n endl \n endl;\ncout \n \nAddress of a[2]: \na[2] = \n \n \na[2] \n endl;\ncout \n \nValue   of a[2]: a[2]  = \n \n a[2]  \n endl;\ncout \n \nValue   of a[2]: *(a+2)= \n \n *(a+2)\n endl \n endl;\n\n\n\n\nResult:\n\n\nAddress of pointer a: \na = 008FF770\nValue   of pointer a:  a = 00C66ED0\n\nAddress of a[0]: \na[0] = 00C66ED0\nValue   of a[0]: a[0]  = 10\nValue   of a[0]: *a    = 10\n\nAddress of a[1]: \na[1] = 00C66ED4\nValue   of a[1]: a[1]  = 2\nValue   of a[1]: *(a+1)= 2\n\nAddress of a[2]: \na[2] = 00C66ED8\nValue   of a[2]: a[2]  = -842150451\nValue   of a[2]: *(a+2)= -842150451\n\n\n\n\nStack\n, \nQueue\n, \nLinked List\n, \nArray\n, \nDeque\n, \nList\n, \nMap\n, \nSet\n\n\nDatetime\n\n\nThe C++ standard library does not provide a proper date type. C++ inherits the structs and functions for date and time manipulation from C. To access date and time related functions and structures, you would need to include \n header file in your C++ program.\n\n\nThere are four time-related types: clock_t, time_t, size_t, and tm. The types clock_t, size_t and time_t are capable of representing the system time and date as some sort of integer.\n\n\nThe structure type tm holds the date and time in the form of a C structure having the following elements:\n\n\nstruct tm {\n   int tm_sec;   // seconds of minutes from 0 to 61\n   int tm_min;   // minutes of hour from 0 to 59\n   int tm_hour;  // hours of day from 0 to 24\n   int tm_mday;  // day of month from 1 to 31\n   int tm_mon;   // month of year from 0 to 11\n   int tm_year;  // year since 1900\n   int tm_wday;  // days since sunday\n   int tm_yday;  // days since January 1st\n   int tm_isdst; // hours of daylight savings time\n}\n\n\n\n\nCurrent date and time\n\n\nConsider you want to retrieve the current system date and time, either as a local time or as a Coordinated Universal Time (UTC). Following is the example to achieve the same:\n\n\n#include \niostream\n\n#include \nctime\n\n\nusing namespace std;\n\nint main( ) {\n   // current date/time based on current system\n   time_t now = time(0);\n\n   // convert now to string form\n   char* dt = ctime(\nnow);\n\n   cout \n \nThe local date and time is: \n \n dt \n endl;\n\n   // convert now to tm struct for UTC\n   tm *gmtm = gmtime(\nnow);\n   dt = asctime(gmtm);\n   cout \n \nThe UTC date and time is:\n dt \n endl;\n}\n\n\n\n\nWhen the above code is compiled and executed, it produces the following result:\n\n\nThe local date and time is: Sat Jan  8 20:07:41 2011\n\nThe UTC date and time is:Sun Jan  9 03:07:41 2011", 
            "title": "Data Structure"
        }, 
        {
            "location": "/datastructure/#data-structure", 
            "text": "", 
            "title": "Data Structure"
        }, 
        {
            "location": "/datastructure/#number", 
            "text": "C++ offer the programmer a rich assortment of built-in as well as user defined data types. Following table lists down seven basic C++ data types:   Boolean  - bool  Character  - char  Integer  - int  Floating point  - float  Double floating point  - double  Valueless  - void  Wide character  - wchar_t   Several of the basic types can be modified using one or more of these type modifiers:  signed ,  unsigned ,  short ,  long  Following is the example, which will produce correct size of various data types on your computer.  #include  iostream \nusing namespace std;\n\nint main() {\n   cout    Size of char :     sizeof(char)   endl;\n   cout    Size of int :     sizeof(int)   endl;\n   cout    Size of short int :     sizeof(short int)   endl;\n   cout    Size of long int :     sizeof(long int)   endl;\n   cout    Size of float :     sizeof(float)   endl;\n   cout    Size of double :     sizeof(double)   endl;\n   cout    Size of wchar_t :     sizeof(wchar_t)   endl;\n   return 0;\n}", 
            "title": "Number"
        }, 
        {
            "location": "/datastructure/#string", 
            "text": "String Basic  #include  iostream \n#include  string \nusing namespace std ;\n\n// assign a string\nstring s1 =  www.java2s.com\\n ;\ncout   s1;\n\n// input a string\nstring s2;\ncin   s2;\n\n// concatenate two strings\nstring s_c = s1 + s2;\n\n// compare strings\ns1 == s2;", 
            "title": "String"
        }, 
        {
            "location": "/datastructure/#collection", 
            "text": "", 
            "title": "Collection"
        }, 
        {
            "location": "/datastructure/#pointer", 
            "text": "A pointer is a variable whose value is the address of another variable. Like any variable or constant, you must declare a pointer before you can work with it.  The general form of a pointer variable declaration is:  type *variable_name;\n// example\nint    *ip;    // pointer to an integer\ndouble *dp;    // pointer to a double\nfloat  *fp;    // pointer to a float\nchar   *ch;    // pointer to character  Pointer Lab   #include  iostream \nusing namespace std;\n\n/*\n * Look at these lines\n */\nint* a;\na = new int[3];\na[0] = 10;\na[1] = 2;\ncout    Address of pointer a:  a =      a   endl;\ncout    Value   of pointer a:  a =     a   endl   endl;\ncout    Address of a[0]:  a[0] =      a[0]   endl;\ncout    Value   of a[0]: a[0]  =     a[0]    endl;\ncout    Value   of a[0]: *a    =     *a      endl   endl;\ncout    Address of a[1]:  a[1] =      a[1]   endl;\ncout    Value   of a[1]: a[1]  =     a[1]    endl;\ncout    Value   of a[1]: *(a+1)=     *(a+1)  endl   endl;\ncout    Address of a[2]:  a[2] =      a[2]   endl;\ncout    Value   of a[2]: a[2]  =     a[2]    endl;\ncout    Value   of a[2]: *(a+2)=     *(a+2)  endl   endl;  Result:  Address of pointer a:  a = 008FF770\nValue   of pointer a:  a = 00C66ED0\n\nAddress of a[0]:  a[0] = 00C66ED0\nValue   of a[0]: a[0]  = 10\nValue   of a[0]: *a    = 10\n\nAddress of a[1]:  a[1] = 00C66ED4\nValue   of a[1]: a[1]  = 2\nValue   of a[1]: *(a+1)= 2\n\nAddress of a[2]:  a[2] = 00C66ED8\nValue   of a[2]: a[2]  = -842150451\nValue   of a[2]: *(a+2)= -842150451  Stack ,  Queue ,  Linked List ,  Array ,  Deque ,  List ,  Map ,  Set", 
            "title": "Pointer"
        }, 
        {
            "location": "/datastructure/#datetime", 
            "text": "The C++ standard library does not provide a proper date type. C++ inherits the structs and functions for date and time manipulation from C. To access date and time related functions and structures, you would need to include   header file in your C++ program.  There are four time-related types: clock_t, time_t, size_t, and tm. The types clock_t, size_t and time_t are capable of representing the system time and date as some sort of integer.  The structure type tm holds the date and time in the form of a C structure having the following elements:  struct tm {\n   int tm_sec;   // seconds of minutes from 0 to 61\n   int tm_min;   // minutes of hour from 0 to 59\n   int tm_hour;  // hours of day from 0 to 24\n   int tm_mday;  // day of month from 1 to 31\n   int tm_mon;   // month of year from 0 to 11\n   int tm_year;  // year since 1900\n   int tm_wday;  // days since sunday\n   int tm_yday;  // days since January 1st\n   int tm_isdst; // hours of daylight savings time\n}  Current date and time  Consider you want to retrieve the current system date and time, either as a local time or as a Coordinated Universal Time (UTC). Following is the example to achieve the same:  #include  iostream \n#include  ctime \n\nusing namespace std;\n\nint main( ) {\n   // current date/time based on current system\n   time_t now = time(0);\n\n   // convert now to string form\n   char* dt = ctime( now);\n\n   cout    The local date and time is:     dt   endl;\n\n   // convert now to tm struct for UTC\n   tm *gmtm = gmtime( now);\n   dt = asctime(gmtm);\n   cout    The UTC date and time is:  dt   endl;\n}  When the above code is compiled and executed, it produces the following result:  The local date and time is: Sat Jan  8 20:07:41 2011\n\nThe UTC date and time is:Sun Jan  9 03:07:41 2011", 
            "title": "Datetime"
        }, 
        {
            "location": "/oop/", 
            "text": "Object Oriented Programming\n\n\nClasses and Objects\n\n\n#include \niostream\n\nusing namespace std;\n\nclass Pacman {\n\n    private:\n      int x;\n      int y;\n    public:\n    Pacman(int x, int y);\n    void show();\n};\n\nPacman::Pacman(int x, int y){\n    this-\nx = x;\n    this-\ny = y;\n}\n\nvoid Pacman::show(){\n    std::cout \n \n(\n \n this-\nx \n \n, \n \n this-\ny \n \n)\n;\n}\n\nint main() {\n    // your code goes here\n    Pacman p = Pacman(2, 3);\n    p.show();\n    return 0;\n}\n\n\n\n\nTemplate\n\n\nFunction Template\n\n\n#include \niostream\n\n#include \nstring\n\n\nusing namespace std;\n\ntemplate \ntypename T\n\n\nT Max(T a, T b)\n{\n    return a \n b ? b : a;\n}\n\nint main()\n{\n\n    int i = 39;\n    int j = 20;\n    cout \n Max(i, j) \n endl;\n\n    double f1 = 13.5;\n    double f2 = 20.7;\n    cout \n Max(f1, f2) \n endl;\n\n    string s1 = \nHello\n;\n    string s2 = \nWorld\n;\n    cout \n Max(s1, s2) \n endl;\n\n    double n1 = 20.3;\n    float n2 = 20.4;\n    // it will show an error\n    // Error: no instance of function template \nMax\n matches the argument list\n    //        arguments types are: (double, float)\n    cout \n Max(n1, n2) \n endl;\n    return 0;\n}", 
            "title": "Object Oriented Programming"
        }, 
        {
            "location": "/oop/#object-oriented-programming", 
            "text": "", 
            "title": "Object Oriented Programming"
        }, 
        {
            "location": "/oop/#classes-and-objects", 
            "text": "#include  iostream \nusing namespace std;\n\nclass Pacman {\n\n    private:\n      int x;\n      int y;\n    public:\n    Pacman(int x, int y);\n    void show();\n};\n\nPacman::Pacman(int x, int y){\n    this- x = x;\n    this- y = y;\n}\n\nvoid Pacman::show(){\n    std::cout    (    this- x    ,     this- y    ) ;\n}\n\nint main() {\n    // your code goes here\n    Pacman p = Pacman(2, 3);\n    p.show();\n    return 0;\n}", 
            "title": "Classes and Objects"
        }, 
        {
            "location": "/oop/#template", 
            "text": "Function Template  #include  iostream \n#include  string \n\nusing namespace std;\n\ntemplate  typename T \n\nT Max(T a, T b)\n{\n    return a   b ? b : a;\n}\n\nint main()\n{\n\n    int i = 39;\n    int j = 20;\n    cout   Max(i, j)   endl;\n\n    double f1 = 13.5;\n    double f2 = 20.7;\n    cout   Max(f1, f2)   endl;\n\n    string s1 =  Hello ;\n    string s2 =  World ;\n    cout   Max(s1, s2)   endl;\n\n    double n1 = 20.3;\n    float n2 = 20.4;\n    // it will show an error\n    // Error: no instance of function template  Max  matches the argument list\n    //        arguments types are: (double, float)\n    cout   Max(n1, n2)   endl;\n    return 0;\n}", 
            "title": "Template"
        }, 
        {
            "location": "/database/", 
            "text": "Database\n\n\nSqlite with Visual Studio 2013\n\n\nStep 1\n: Create new project\n1.1 Create a new C++ Win32 Console application.\n\n\nStep 2:\n Download Sqlite DLL\n\n\n2.1. Download the native SQLite DLL from: http://sqlite.org/sqlite-dll-win32-x86-3070400.zip\n2.2. Unzip the DLL and DEF files and place the contents in your project\u2019s source folder (an easy way to find this is to right click on the tab and click the \u201cOpen Containing Folder\u201d menu item.\n\n\nStep 3:\n Build LIB file\n\n\n3.1. Open a \u201cDeveloper Command Prompt\u201d and navigate to your source folder. (If you can't find this tool, follow this post in stackoverflow \nWhere is Developer Command Prompt for VS2013?\n to create it)\n3.2. Create an import library using the following command line: LIB /DEF:sqlite3.def\n\n\nStep 4:\n Add Dependencies\n\n\n4.1. Add the library (i.e. sqlite3.lib) to your Project Properties -\n Configuration Properties -\n Linker -\n Input -\n Additional Dependencies.\n4.2. Download http://sqlite.org/sqlite-amalgamation-3070400.zip\n4.3. Unzip the sqlite3.h header file and place into your source directory.\n4.4. Include the the sqlite3.h header file in your source code.\n4.5. You will need to include the sqlite3.dll in the same directory as your program (or in a System Folder).\n\n\nStep 5:\n Run test code\n\n\n#include \nstdafx.h\n\n#include \nios\n\n#include \niostream\n\n#include \nsqlite3.h\n\n\nusing namespace std;\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n   int rc;\n   char *error;\n\n   // Open Database\n   cout \n \nOpening MyDb.db ...\n \n endl;\n   sqlite3 *db;\n   rc = sqlite3_open(\nMyDb.db\n, \ndb);\n   if (rc)\n   {\n      cerr \n \nError opening SQLite3 database: \n \n sqlite3_errmsg(db) \n endl \n endl;\n      sqlite3_close(db);\n      return 1;\n   }\n   else\n   {\n      cout \n \nOpened MyDb.db.\n \n endl \n endl;\n   }\n\n   // Execute SQL\n   cout \n \nCreating MyTable ...\n \n endl;\n   const char *sqlCreateTable = \nCREATE TABLE MyTable (id INTEGER PRIMARY KEY, value STRING);\n;\n   rc = sqlite3_exec(db, sqlCreateTable, NULL, NULL, \nerror);\n   if (rc)\n   {\n      cerr \n \nError executing SQLite3 statement: \n \n sqlite3_errmsg(db) \n endl \n endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      cout \n \nCreated MyTable.\n \n endl \n endl;\n   }\n\n   // Execute SQL\n   cout \n \nInserting a value into MyTable ...\n \n endl;\n   const char *sqlInsert = \nINSERT INTO MyTable VALUES(NULL, 'A Value');\n;\n   rc = sqlite3_exec(db, sqlInsert, NULL, NULL, \nerror);\n   if (rc)\n   {\n      cerr \n \nError executing SQLite3 statement: \n \n sqlite3_errmsg(db) \n endl \n endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      cout \n \nInserted a value into MyTable.\n \n endl \n endl;\n   }\n\n   // Display MyTable\n   cout \n \nRetrieving values in MyTable ...\n \n endl;\n   const char *sqlSelect = \nSELECT * FROM MyTable;\n;\n   char **results = NULL;\n   int rows, columns;\n   sqlite3_get_table(db, sqlSelect, \nresults, \nrows, \ncolumns, \nerror);\n   if (rc)\n   {\n      cerr \n \nError executing SQLite3 query: \n \n sqlite3_errmsg(db) \n endl \n endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      // Display Table\n      for (int rowCtr = 0; rowCtr \n= rows; ++rowCtr)\n      {\n         for (int colCtr = 0; colCtr \n columns; ++colCtr)\n         {\n            // Determine Cell Position\n            int cellPosition = (rowCtr * columns) + colCtr;\n\n            // Display Cell Value\n            cout.width(12);\n            cout.setf(ios::left);\n            cout \n results[cellPosition] \n \n \n;\n         }\n\n         // End Line\n         cout \n endl;\n\n         // Display Separator For Header\n         if (0 == rowCtr)\n         {\n            for (int colCtr = 0; colCtr \n columns; ++colCtr)\n            {\n               cout.width(12);\n               cout.setf(ios::left);\n               cout \n \n~~~~~~~~~~~~ \n;\n            }\n            cout \n endl;\n         }\n      }\n   }\n   sqlite3_free_table(results);\n\n   // Close Database\n   cout \n \nClosing MyDb.db ...\n \n endl;\n   sqlite3_close(db);\n   cout \n \nClosed MyDb.db\n \n endl \n endl;\n\n   // Wait For User To Close Program\n   cout \n \nPlease press any key to exit the program ...\n \n endl;\n   cin.get();\n\n   return 0;\n}", 
            "title": "Database"
        }, 
        {
            "location": "/database/#database", 
            "text": "", 
            "title": "Database"
        }, 
        {
            "location": "/database/#sqlite-with-visual-studio-2013", 
            "text": "Step 1 : Create new project\n1.1 Create a new C++ Win32 Console application.  Step 2:  Download Sqlite DLL  2.1. Download the native SQLite DLL from: http://sqlite.org/sqlite-dll-win32-x86-3070400.zip\n2.2. Unzip the DLL and DEF files and place the contents in your project\u2019s source folder (an easy way to find this is to right click on the tab and click the \u201cOpen Containing Folder\u201d menu item.  Step 3:  Build LIB file  3.1. Open a \u201cDeveloper Command Prompt\u201d and navigate to your source folder. (If you can't find this tool, follow this post in stackoverflow  Where is Developer Command Prompt for VS2013?  to create it)\n3.2. Create an import library using the following command line: LIB /DEF:sqlite3.def  Step 4:  Add Dependencies  4.1. Add the library (i.e. sqlite3.lib) to your Project Properties -  Configuration Properties -  Linker -  Input -  Additional Dependencies.\n4.2. Download http://sqlite.org/sqlite-amalgamation-3070400.zip\n4.3. Unzip the sqlite3.h header file and place into your source directory.\n4.4. Include the the sqlite3.h header file in your source code.\n4.5. You will need to include the sqlite3.dll in the same directory as your program (or in a System Folder).  Step 5:  Run test code  #include  stdafx.h \n#include  ios \n#include  iostream \n#include  sqlite3.h \n\nusing namespace std;\n\nint _tmain(int argc, _TCHAR* argv[])\n{\n   int rc;\n   char *error;\n\n   // Open Database\n   cout    Opening MyDb.db ...    endl;\n   sqlite3 *db;\n   rc = sqlite3_open( MyDb.db ,  db);\n   if (rc)\n   {\n      cerr    Error opening SQLite3 database:     sqlite3_errmsg(db)   endl   endl;\n      sqlite3_close(db);\n      return 1;\n   }\n   else\n   {\n      cout    Opened MyDb.db.    endl   endl;\n   }\n\n   // Execute SQL\n   cout    Creating MyTable ...    endl;\n   const char *sqlCreateTable =  CREATE TABLE MyTable (id INTEGER PRIMARY KEY, value STRING); ;\n   rc = sqlite3_exec(db, sqlCreateTable, NULL, NULL,  error);\n   if (rc)\n   {\n      cerr    Error executing SQLite3 statement:     sqlite3_errmsg(db)   endl   endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      cout    Created MyTable.    endl   endl;\n   }\n\n   // Execute SQL\n   cout    Inserting a value into MyTable ...    endl;\n   const char *sqlInsert =  INSERT INTO MyTable VALUES(NULL, 'A Value'); ;\n   rc = sqlite3_exec(db, sqlInsert, NULL, NULL,  error);\n   if (rc)\n   {\n      cerr    Error executing SQLite3 statement:     sqlite3_errmsg(db)   endl   endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      cout    Inserted a value into MyTable.    endl   endl;\n   }\n\n   // Display MyTable\n   cout    Retrieving values in MyTable ...    endl;\n   const char *sqlSelect =  SELECT * FROM MyTable; ;\n   char **results = NULL;\n   int rows, columns;\n   sqlite3_get_table(db, sqlSelect,  results,  rows,  columns,  error);\n   if (rc)\n   {\n      cerr    Error executing SQLite3 query:     sqlite3_errmsg(db)   endl   endl;\n      sqlite3_free(error);\n   }\n   else\n   {\n      // Display Table\n      for (int rowCtr = 0; rowCtr  = rows; ++rowCtr)\n      {\n         for (int colCtr = 0; colCtr   columns; ++colCtr)\n         {\n            // Determine Cell Position\n            int cellPosition = (rowCtr * columns) + colCtr;\n\n            // Display Cell Value\n            cout.width(12);\n            cout.setf(ios::left);\n            cout   results[cellPosition]      ;\n         }\n\n         // End Line\n         cout   endl;\n\n         // Display Separator For Header\n         if (0 == rowCtr)\n         {\n            for (int colCtr = 0; colCtr   columns; ++colCtr)\n            {\n               cout.width(12);\n               cout.setf(ios::left);\n               cout    ~~~~~~~~~~~~  ;\n            }\n            cout   endl;\n         }\n      }\n   }\n   sqlite3_free_table(results);\n\n   // Close Database\n   cout    Closing MyDb.db ...    endl;\n   sqlite3_close(db);\n   cout    Closed MyDb.db    endl   endl;\n\n   // Wait For User To Close Program\n   cout    Please press any key to exit the program ...    endl;\n   cin.get();\n\n   return 0;\n}", 
            "title": "Sqlite with Visual Studio 2013"
        }, 
        {
            "location": "/testing/", 
            "text": "Create Unit Test in Visual Studio 2013\n\n\nStep 1. Create \nTDDLab\n Solution\n\n\n1.1\n Open Visual Studio 2013\n\n\n1.2\n \nFile\n -\n  \nNew Project...\n -\n\n\n\n\n\n\nClick \nVisual C++\n -\n \nWin32\n\n\n\n\n\n\nChoose \nWin32 Console Application\n\n\n\n\n\n\nFill to \nName\n input text: \nTDDLab\n\n\n\n\n\n\nClick \nOK\n -\n \nNext\n\n\n\n\n\n\n1.3\n In project settings, remove options:\n\n\n\n\nPrecompiled Header\n\n\nSecurirty Develoment Lifecyde(SQL) check\n\n\n\n\n1.4\n Click \nFinish\n\n\nStep 2. Create \nCounter\n Class\n\n\n2.1\n Right-click \nTDDLab\n -\n \nAdd\n -\n \nClass...\n\n\n2.2\n Choose \nVisual C++\n -\n \nC++ Class\n -\n \nAdd\n\n\n2.3\n Fill in \nClass name\n box \nCounter\n -\n \nFinish\n\n\n2.4\n In \nCounter.h\n file, add this below function\n\n\nint add(int a, int b);\n\n\n\n\n2.5\n In \nCounter.cpp\n, add this below function\n\n\nint Counter::add(int a, int b) {\n  return a+b;\n}\n\n\n\n\nYour \nCounter\n class should look like this\n\n\n\n\nStep 3. Create \nTDDLabTest\n Project\n\n\n3.1\n Right-click \nSolution 'TDDLab'\n -\n \nAdd\n -\n \nNew Project...\n\n\n3.2\n Choose \nVisual C++\n -\n \nTest\n\n\n3.3\n Choose \nNative Unit Test Project\n\n\n3.4\n Fill to \nName\n input text: \nTDDLabTest\n\n\nStep 4. Write unit test\n\n\n4.1\n  In \nunittest1.cpp\n, add header of \nCounter\n class\n\n\n#include \n../TDDLab/Counter.h\n\n\n\n\n\n4.2\n In \nTEST_METHOD\n function\n\n\n{\n  Counter counter;\n  Assert::AreEqual(2, counter.add(1, 1));\n}\n\n\n\n\n4.3\n Click \nTEST\n in menu bar -\n \nRun\n -\n `All Test (Ctrl + R, A)\n\n\nStep 5. Fix error \nLNK 2019: unresolved external symbol\n\n\n5.1\n Change \nConfiguration Type\n of \nTDDLab\n project\n\n\n\n\nRight click  \nTDDLab\n project -\n \nProperties\n\n\nGeneral\n -\n \nConfiguration Type\n -\n \nStatic library (.lib)\n -\n \nOK\n\n\n\n\n5.2\n Add Reference to \nTDDLabTest\n project\n\n\n\n\nRight click \nTDDLabTest\n solution -\n \nProperties\n -\n \nCommon Properties\n -\n \nAdd New Reference\n\n\nChoose \nTDDLab\n -\n \nOK\n -\n \nOK\n\n\n\n\nStep 6. Run Tests\n\n\nClick \nTEST\n in menu bar -\n \nRun\n -\n `All Test (Ctrl + R, A)\n\n\nTest should be passed.", 
            "title": "Testing"
        }, 
        {
            "location": "/testing/#create-unit-test-in-visual-studio-2013", 
            "text": "", 
            "title": "Create Unit Test in Visual Studio 2013"
        }, 
        {
            "location": "/testing/#step-1-create-tddlab-solution", 
            "text": "1.1  Open Visual Studio 2013  1.2   File  -    New Project...  -    Click  Visual C++  -   Win32    Choose  Win32 Console Application    Fill to  Name  input text:  TDDLab    Click  OK  -   Next    1.3  In project settings, remove options:   Precompiled Header  Securirty Develoment Lifecyde(SQL) check   1.4  Click  Finish", 
            "title": "Step 1. Create TDDLab Solution"
        }, 
        {
            "location": "/testing/#step-2-create-counter-class", 
            "text": "2.1  Right-click  TDDLab  -   Add  -   Class...  2.2  Choose  Visual C++  -   C++ Class  -   Add  2.3  Fill in  Class name  box  Counter  -   Finish  2.4  In  Counter.h  file, add this below function  int add(int a, int b);  2.5  In  Counter.cpp , add this below function  int Counter::add(int a, int b) {\n  return a+b;\n}  Your  Counter  class should look like this", 
            "title": "Step 2. Create Counter Class"
        }, 
        {
            "location": "/testing/#step-3-create-tddlabtest-project", 
            "text": "3.1  Right-click  Solution 'TDDLab'  -   Add  -   New Project...  3.2  Choose  Visual C++  -   Test  3.3  Choose  Native Unit Test Project  3.4  Fill to  Name  input text:  TDDLabTest", 
            "title": "Step 3. Create TDDLabTest Project"
        }, 
        {
            "location": "/testing/#step-4-write-unit-test", 
            "text": "4.1   In  unittest1.cpp , add header of  Counter  class  #include  ../TDDLab/Counter.h   4.2  In  TEST_METHOD  function  {\n  Counter counter;\n  Assert::AreEqual(2, counter.add(1, 1));\n}  4.3  Click  TEST  in menu bar -   Run  -  `All Test (Ctrl + R, A)", 
            "title": "Step 4. Write unit test"
        }, 
        {
            "location": "/testing/#step-5-fix-error-lnk-2019-unresolved-external-symbol", 
            "text": "5.1  Change  Configuration Type  of  TDDLab  project   Right click   TDDLab  project -   Properties  General  -   Configuration Type  -   Static library (.lib)  -   OK   5.2  Add Reference to  TDDLabTest  project   Right click  TDDLabTest  solution -   Properties  -   Common Properties  -   Add New Reference  Choose  TDDLab  -   OK  -   OK", 
            "title": "Step 5. Fix error LNK 2019: unresolved external symbol"
        }, 
        {
            "location": "/testing/#step-6-run-tests", 
            "text": "Click  TEST  in menu bar -   Run  -  `All Test (Ctrl + R, A)  Test should be passed.", 
            "title": "Step 6. Run Tests"
        }, 
        {
            "location": "/ide/", 
            "text": "Visual Studio 2013\n\n\nInstall Extension\n\n\nVsVim\n\n\ngoogletest\n \nguide\n\n\nFolder Structure with VS 2013\n\n\nsolution\n\u2502   README.md\n\u2502\n|\u2500\u2500\u2500project1\n|   \u2502   file011.txt\n|   \u2502   file012.txt\n|   \u2502\n|\u2500\u2500\u2500project2\n|   \u2502   file011.txt\n|   \u2502   file012.txt\n|   \u2502\n\n\n\n\nAuto Format\n\n\nCtrl + K, Ctrl + D\n\n\n\n\nGit in Visual Studio\n\n\nhttps://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Visual-Studio\n\n\nOnline IDE\n\n\n\n\ncodechef ide", 
            "title": "IDE & Debugging"
        }, 
        {
            "location": "/ide/#visual-studio-2013", 
            "text": "Install Extension  VsVim  googletest   guide  Folder Structure with VS 2013  solution\n\u2502   README.md\n\u2502\n|\u2500\u2500\u2500project1\n|   \u2502   file011.txt\n|   \u2502   file012.txt\n|   \u2502\n|\u2500\u2500\u2500project2\n|   \u2502   file011.txt\n|   \u2502   file012.txt\n|   \u2502  Auto Format  Ctrl + K, Ctrl + D  Git in Visual Studio  https://git-scm.com/book/en/v2/Git-in-Other-Environments-Git-in-Visual-Studio", 
            "title": "Visual Studio 2013"
        }, 
        {
            "location": "/ide/#online-ide", 
            "text": "codechef ide", 
            "title": "Online IDE"
        }
    ]
}